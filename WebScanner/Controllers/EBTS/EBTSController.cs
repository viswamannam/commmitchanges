using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using WebScanner.Models.EBTS;

namespace WebScanner.Controllers.EBTS
{
    public class EBTSController : ControllerBase
    {
        // GET: EBTS
        public ViewResult Index()
        {
            DBDataContext db = new DBDataContext();
            var data = db.vw_TransactionTypes.ToList();
            ViewBag.userdetails = data;
            if (TempData["Error"] != null)
            {
                ViewBag.ErrorList = TempData["Error"].ToString();
            }
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        //[AllowAnonymous]
        //Create new seeds with person
        public ActionResult AddNewEnrollment(WebScanner.Models.EBTS.Person person)
        {
            string strSQL;
            var ViewModelPerson = new WebScanner.ViewModels.Enrollment.NewEnrollmentFormViewModel
            {
                Person = person
            };

            if (!ModelState.IsValid)
            {
                TempData["Error"] = "";
                var modelErrors = new List<string>();
                foreach (var modelState in ModelState.Values)
                {
                    foreach (var modelError in modelState.Errors)
                    {
                        TempData["Error"] = TempData["Error"] + "<li>" + modelError.ErrorMessage + "</li>";
                    }
                }

                return RedirectToAction("Index", "EBTS", ViewModelPerson);
            }
            var RandomNumber = new Random();

            DBDataContext db = new DBDataContext();
            //var fld = db.vw_Fileds.Where(f => f.Identifier == person.IdentifierCode).Select(f => new { f.Identifier, f.TotTypeId });

            string NewRandomNumber = RandomNumber.Next(10000000, 99999999).ToString();

            var vwDistinctLogicalRecordType = db.vw_LogicalRecordTypes.Where(col => col.Identifier == person.IdentifierCode).Select(col => new { col.TransactionTypeId }).Distinct();

            foreach (var row in vwDistinctLogicalRecordType)
            {
                strSQL = @"INSERT INTO [dbo].[tlbTransaction_Master]
                           ([Transaction_ID]
                            ,[Transaction_TypeId]
                           ,[Transaction_Desc])
                     VALUES
                           (" + NewRandomNumber + "," + row.TransactionTypeId + ",'')";
                try
                {
                    db.ExecuteCommand(strSQL);
                }
                catch (Exception ex)
                {
                    return Content("Error saving data!");
                }
            }
            string DisplayFieldName = "";
            int FieldNumber = 0;
            var vwLogicalRecordType = db.vw_LogicalRecordTypes.Where(col => col.Identifier == person.IdentifierCode).Select(col => new { col.Identifier, col.TotTypeId });
            foreach (var row in vwLogicalRecordType)
            {
                var vwFields = db.vw_Fileds.Where(col => col.Identifier == person.IdentifierCode && col.TotTypeId == row.TotTypeId && col.IsAutoGenerated == false).Select(col => new { col.TotTypeId, col.FieldId });
                FieldNumber = 0;
                foreach (var fieldRow in vwFields)
                {
                    DisplayFieldName = "Field[" + FieldNumber.ToString() + "].FieldList";
                    strSQL = @"INSERT INTO [dbo].[tlbTransaction_Detail]
                               ([Transaction_ID]
                               ,[Transaction_TotTypeId]
                               ,[Transaction_FieldID]
                               ,[Transaction_Value]
                               ,[Transaction_DisplayFieldName])
                         VALUES
                               (" + NewRandomNumber + ","
                          + fieldRow.TotTypeId + ","
                          + fieldRow.FieldId + ",'"
                          + "" + "','"
                          + DisplayFieldName + "')";
                    FieldNumber = FieldNumber + 1;
                    db.ExecuteCommand(strSQL);
                }
            }
            //Aliases FieldID= 33
            //Name FieldID= 31            
            int TOTTyepeID = 0;
            var fieldlist = db.vw_Fileds.Where(col => col.Identifier == person.IdentifierCode && col.FieldId == 31).Select(col => new { col.TotTypeId }).SingleOrDefault();

            strSQL = @"UPDATE [dbo].[tlbTransaction_Detail]
                        SET [Transaction_Value]='" + person.FullName + "' "
                + "WHERE [Transaction_ID]=" + NewRandomNumber + " "
                + "AND [Transaction_FieldID]=" + 31 + ""
                + "AND Transaction_TotTypeId=" + fieldlist.TotTypeId;
            db.ExecuteCommand(strSQL);

            return RedirectToAction("NewEnrollment/" + person.IdentifierCode, "EBTS", new { transactionid = NewRandomNumber });
        }

        [HttpPost]
        //save/Update data
        //EBTS/NewEnrollment/CNA?TotType=8&transactionid=48650597
        public ActionResult NewEnrollment(string Identifier, PersonViewModel model)
        {



            int TOTTypeNumber; //= Request.QueryString["TotType"];
            int transactionid;// = Request.QueryString["transactionid"];

            if(IsNumeric(Request.QueryString["transactionid"]))
            {
                transactionid = Convert.ToInt32(Request.QueryString["transactionid"]);
            }
            else
            {
                return Content("Error: transactionid");
            }

            if (IsNumeric(Request.QueryString["TotType"]))
            {
                TOTTypeNumber = Convert.ToInt32(Request.QueryString["TotType"]);
            }
            else
            {
                return Content("Error: TOTType");
            }


            //return View(ViewModelFieldList);
            //return RedirectToAction("Index", "EBTS", ViewModelPerson);
            //return RedirectToAction("NewEnrollment", new { TotType = TOTTypeNumber, transactionid = transactionid });

            //string forminvalue = string.Join(",", frm.AllKeys);
            DBDataContext db = new DBDataContext();
            string fldname = "";
            //frm.AllKeys.ToList().Contains(fld.FieldName)
            //db.ExecuteQuery<Customer>("select * from dbo.Customers where City = {0}", "London");
            //int rccount = db.tlbTransaction_Masters.Where(m => m.Transaction_ID == Convert.ToInt32(Session["Transaction_ID"])).Count();

            var fldlist =from fld in db.vw_Fileds.Where(f => f.IsAutoGenerated == false).OrderBy(f => f.FieldId)select(fld);
            //where fld.TypeNumber == tempInt && fld.Identifier == Identifier ));

            //foreach (var row in fldlist.ToList())
            //{
            //    rccount = db.tlbTransaction_Details.Where(fldrow => fldrow.Transaction_ID == Convert.ToInt32(Session["Transaction_ID"]) && fldrow.Transaction_FieldID == row.FieldId).Count();
            //    fldname = "frm[row.FieldName]";

            //    string strSQL = @"UPDATE [dbo].[tlbTransaction_Detail]
            //                    SET [Transaction_Value]='" + fldname + "'"
            //                    + "WHERE [Transaction_ID]=" + Session["Transaction_ID"] + " "
            //                    + "AND [Transaction_FieldID]=" + row.FieldId;
            //    db.ExecuteCommand(strSQL);

            //}

            string uservalu = "";
            //foreach (var value in model.Field)
            //{
            //    uservalu = value.FieldList;
            //}



            //int TOTTypeNumber; //= Request.QueryString["TotType"];
            //int transactionid;// = Request.QueryString["transactionid"];

            var fieldview = db.vw_TranactionFileds.Where(f => f.Transaction_ID == transactionid && f.Transaction_TotTypeId == TOTTypeNumber);
            string RunningFieldValue = "";
            foreach (var row in fieldview.ToList())
            {
                for (int i = 0; i <= model.Field.Count-1; i++)
                {
                    //uservalu = model.Field[i].FieldList;
                    if(row.FieldName=="Field["+ i.ToString() + "].FieldList")
                    {
                        RunningFieldValue = model.Field[i].FieldList;

                        string strSQL = @"UPDATE [dbo].[tlbTransaction_Detail]
                                            SET [Transaction_Value]='" + RunningFieldValue + "'"
                                        + "WHERE [Transaction_ID]=" + transactionid + " "
                                        + "AND [Transaction_FieldID]=" + row.FieldId + " "
                                        + "AND [Transaction_TotTypeId]=" + TOTTypeNumber + "";

                        db.ExecuteCommand(strSQL);

                        break;
                    }

                }
            }

                return Content("Data saved!");

            //return RedirectToAction("NewEnrollment");
        }
        [HttpPost]
        public JsonResult GetSaveImage( string fieldid)
        {
            if (fieldid != "")
            {
                string Url = ((System.Web.HttpRequestWrapper)Request).UrlReferrer.ToString();

                int Transcationid = Convert.ToInt32(Url.Split('?')[1].Split('=')[1]);
                DBDataContext db = new DBDataContext();
                var Details = db.tlbTransaction_Details.Where(f => f.Transaction_ID == Transcationid && f.Transaction_Value == fieldid).FirstOrDefault();
                if (Details == null)
                {
                    return Json(new { data = Details }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { data = Details.Transaction_BinaryValue.ToString().Replace('"', ' '), image = fieldid }, JsonRequestBehavior.AllowGet);
                }
               
            }
            return Json(new { data = "", image = "" }, JsonRequestBehavior.AllowGet);

        }
       
        [HttpGet]
      
        //public JsonResult GetAllImages()
        //{
        //    string Url = ((System.Web.HttpRequestWrapper)Request).UrlReferrer.ToString();

        //    int Transcationid = Convert.ToInt32(Url.Split('?')[1].Split('=')[1]);
        //    DBDataContext db = new DBDataContext();
        //    var Details = db.tlbTransaction_Details.Where(f => f.Transaction_ID == Transcationid );

        //    List<Transaction_Detail> detailsList = new List<Transaction_Detail>();
        //    JavaScriptSerializer serializer = new JavaScriptSerializer();
        //    serializer.MaxJsonLength = Int32.MaxValue;
        //    foreach (tlbTransaction_Detail xin in Details) {
        //        if (xin.Transaction_BinaryValue != null)
        //        {
        //            Transaction_Detail details = new Transaction_Detail();
        //            details.Transaction_ID = xin.Transaction_Value;
        //            details.Transaction_BinaryValue = BinaryToString(xin.Transaction_BinaryValue.ToString().Replace('"', ' '));

        //            detailsList.Add(details);
        //        }

        //    }
        //    var jsonResult = Json(detailsList, JsonRequestBehavior.AllowGet);
        //    jsonResult.MaxJsonLength = int.MaxValue;

          

        //    if (Details == null)
        //    {
        //        return Json(new { data = detailsList, MaxJsonLength = Int32.MaxValue }, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        return Json(new { data = detailsList }, JsonRequestBehavior.AllowGet);
        //    }

        //}
        
        [HttpPost]
        public JsonResult SaveImage(string image,string fieldid)
        {
            
            

            int id = Convert.ToInt32(TempData["id"]);
            image = image.Replace("data:image/jpeg;base64, ", "");
            int moreNeeded = image.Length % 4;
            if (moreNeeded != 0)
            {
                for (int a = 0; a < 4 - moreNeeded; a++)
                {
                    image += "=";
                }
            }
            DBDataContext db = new DBDataContext();
            var image_details = db.tlbTransaction_Details.Where(f => f.Transaction_ID == id && f.Transaction_Value == fieldid).FirstOrDefault();
            if(image_details== null)
            {
                var Tot_id = db.vw_Fileds.Where(f => f.Identifier == "CAR" && f.FieldName == "T4_FGP").FirstOrDefault();
                var Field_Name = db.vw_Fileds.Where(f => f.Identifier == "CAR" && f.Description == "Finger Position").FirstOrDefault();

                byte[] image_array = Convert.FromBase64String(image);
                string query = @"Insert into tlbTransaction_Detail values(@ID,@Tot_id,222,@fieldid,@Imagedata,'','')";
                string constr = ConfigurationManager.ConnectionStrings["ScannerConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand cmd = new SqlCommand(query))
                    {
                        cmd.Parameters.AddWithValue("@Imagedata", image_array);
                        cmd.Parameters.AddWithValue("@ID", id);
                        cmd.Parameters.AddWithValue("@fieldid", fieldid);
                        cmd.Parameters.AddWithValue("@Tot_id", Tot_id.TotTypeId);
                        cmd.Connection = con;
                        con.Open();
                        cmd.ExecuteNonQuery();
                        con.Close();

                    }
                }
                TempData["id"] = id;
                return Json("", JsonRequestBehavior.AllowGet);
            }
            else
            {
                var Tot_id = db.vw_Fileds.Where(f => f.Identifier == "CAR" && f.FieldName == "T4_FGP").FirstOrDefault();
                var Field_Name = db.vw_Fileds.Where(f => f.Identifier == "CAR" && f.Description == "Finger Position").FirstOrDefault();

                byte[] image_array = Convert.FromBase64String(image);
                string query = @"Update tlbTransaction_Detail set [Transaction_totTypeId]= @Tot_id, [Transaction_BinaryValue] = @Imagedata
                                 where [Transaction_ID] = @ID and [Transaction_Value] = @fieldid";
                  
                
                string constr = ConfigurationManager.ConnectionStrings["ScannerConnectionString"].ConnectionString;
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand cmd = new SqlCommand(query))
                    {
                        cmd.Parameters.AddWithValue("@Imagedata", image_array);
                        cmd.Parameters.AddWithValue("@ID", id);
                        cmd.Parameters.AddWithValue("@fieldid", fieldid);
                        cmd.Parameters.AddWithValue("@Tot_id", Tot_id.TotTypeId);
                        cmd.Connection = con;
                        con.Open();
                        cmd.ExecuteNonQuery();
                        con.Close();

                    }
                }
                TempData["id"] = id;
                return Json("", JsonRequestBehavior.AllowGet);
            }
            
        }
        [HttpPost]

        public JsonResult DeleteImage( string fieldid)
        {
            string Url = ((System.Web.HttpRequestWrapper)Request).UrlReferrer.ToString();

            int Transcationid = Convert.ToInt32(Url.Split('?')[1].Split('=')[1]);
            string query = @"delete from tlbTransaction_Detail 
                                 where [Transaction_ID] = @ID and [Transaction_Value] = @fieldid";

            string constr = ConfigurationManager.ConnectionStrings["ScannerConnectionString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(constr))
            {
                using (SqlCommand cmd = new SqlCommand(query))
                {
                   
                    cmd.Parameters.AddWithValue("@ID", Transcationid);
                    cmd.Parameters.AddWithValue("@fieldid", fieldid);
                    
                    cmd.Connection = con;
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();

                }
            }
            TempData["id"] = Transcationid;
            return Json("", JsonRequestBehavior.AllowGet);

        }
        [HttpGet]
        public ViewResult NewEnrollment(string id)
        {
            string Identifier = id;
            double tempInt = 0;
            string TOTTypeNumber = Request.QueryString["TotType"];
            string transactionid = Request.QueryString["transactionid"];


            List<Field> fld = new List<Field>();
            PersonViewModel model = new PersonViewModel() { Field = fld };
            if (transactionid != null)
            {
                if (!double.TryParse(transactionid, out tempInt))
                {
                    return View();
                }
            }

            if (TOTTypeNumber != null)
            {
                
                if (!IsNumeric(TOTTypeNumber))
                {
                    return View();
                }
            }

            DBDataContext db = new DBDataContext();
            //Left Menu
            var LogicalRecordTypes = db.vw_LogicalRecordTypes.Where(l => l.Identifier == Identifier.ToString()).ToList();
            //Display Header
            var TransactionType = db.vw_TransactionTypes.Where(f => f.Identifier == Identifier.ToString()).ToList();
            ViewBag.TransactionType = TransactionType;
            ViewBag.LogicalRecordTypes = LogicalRecordTypes;
            ViewBag.Field = null;
            if (TOTTypeNumber != null)
            {
                //string identifier = Identifier.ToString();
                IQueryable<vw_TranactionFiled> field = db.vw_TranactionFileds.Where(f => f.Identifier == Identifier && f.Transaction_TotTypeId == Convert.ToInt32(TOTTypeNumber) && f.Transaction_ID == Convert.ToInt32(transactionid) && f.IsAutoGenerated == false);
                ViewBag.Field = field;
                return View(model);
            }
            //return View();
            return View(model);
        }
       
        public ActionResult Prints(int? transactionid)
        {
            int id =Convert.ToInt32( Request.QueryString["transactionid"]);
            TempData["id"]  = id;
            return View(true);
        }
    }
}